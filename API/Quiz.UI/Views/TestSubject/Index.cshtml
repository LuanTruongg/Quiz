@using Quiz.DTO.TestSubjectManagement
@using Quiz.DTO.TestStructureManagement
@using Quiz.Service.Extensions
@using System.Web;
@model List<UserAnswerRequest>
@{
    List<GetListQuestionOfTestResponse> listQuestion = ViewBag.ListQuestion;
    var testStructureId = ViewBag.TestStructureId;
    TestStructureItem testStructure = ViewBag.TestStructure;
}
<style>
    *{
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body{
       font-family: sans-serif;
    }
    .container{
        background-color: white;
        color: black;
        border-radius: 10px;
        padding: 20px;
        font-family: 'Montserrat', sans-serif;
    }
    .container > p{
        font-size: 40px;
    }
    .question{
        /* width: 90%; */
    }
    .options{
        position: relative;
        padding-left: 40px;
    }
    #options label{
        display: block;
        margin-bottom: 15px;
        font-size: 20px;
        cursor: pointer;
    }
    .options input{
        opacity: 0;
    }
    .checkmark {
        position: absolute;
        top: -1px;
        left: 0;
        height: 25px;
        width: 25px;
        background-color: white;
        border: 1px solid black;
        border-radius: 50%;
    }
    .options input:checked ~ .checkmark:after {
        display: block;
    }
    .options .checkmark:after{
        content: "";
	    width: 10px;
        height: 10px;
        display: block;
	    background: white;
        position: absolute;
        top: 50%;
	    left: 50%;
        border-radius: 50%;
        transform: translate(-50%,-50%) scale(0);
        transition: 300ms ease-in-out 0s;
    }
    .options input[type="radio"]:checked ~ .checkmark{
        background: #21bf73;
        transition: 300ms ease-in-out 0s;
    }
    .options input[type="radio"]:checked ~ .checkmark:after{
        transform: translate(-50%,-50%) scale(1);
    }
    .btn-primary{
        background-color: #555;
        color: #ddd;
        border: 1px solid #ddd;
    }
    .btn-primary:hover{
        background-color: #21bf73;
        border: 1px solid #21bf73;
    }
    .btn-success{
        padding: 5px 25px;
        background-color: #21bf73;
    }
}
</style>
<div class="py-2 px-4 d-flex justify-content-end">
    <div style="font-size:24px">
        <span class="text-danger">Thời gian làm bài: </span>
        <span id="timer" class="text-danger">@testStructure.Time:00</span>
    </div>
</div>
<script>
    var timeLimitInMinutes = @testStructure.Time;
    var timeLimitInSeconds = timeLimitInMinutes * 60;
    var timerElement = document.getElementById('timer');

    function startTimer() {
        timeLimitInSeconds--;
        var minutes = Math.floor(timeLimitInSeconds / 60);
        var seconds = timeLimitInSeconds % 60;

        if (timeLimitInSeconds < 0) {
            timerElement.textContent = '00:00';
            clearInterval(timerInterval);
            document.getElementById("submitTestButton").click();
            return;
        }

        if (minutes < 10) {
            minutes = '0' + minutes;
        }
        if (seconds < 10) {
            seconds = '0' + seconds;
        }

        timerElement.textContent = minutes + ':' + seconds;
    }

    var timerInterval = setInterval(startTimer, 1000);

</script>
@using (Html.BeginForm("SubmitTest", "TestSubject", FormMethod.Post))
{
    <input type="hidden" value="@testStructureId" name="testStructureId" />
    <div>
        @{
            for (int i = 0; i < listQuestion.Count(); i++)
            {
                <div class="container w-100 shadow-sm p-3 mb-5 bg-white rounded">
                <div class="question w-100">
                    <div class="py-2 h5">
                            @{
                                if (listQuestion[i].QuestionCustom == "Speaking")
                                {
                                    // string encodedString = listQuestion[i].QuestionText;
                                    // string decodedString = HttpUtility.UrlDecode(encodedString);
                                    <script>
                                        var encodedString = @listQuestion[i].QuestionText;
                                        var decodedString = decodeURIComponent(encodedString);
                                        var question = document.getElementById("speaking");
                                        question.innerHTML = decodedString;
                                        console.log(decodedString);
                                    </script>
                                    <p id="speaking"></p>
                                }
                                else
                                {
                                    <b>Câu @(i + 1): @Base64.Base64Decode(listQuestion[i].QuestionText)</b>
                                }
                            }
                     
                    </div>
                        @{
                            if (!string.IsNullOrEmpty(listQuestion[i].Image))
                            {
                                <img src="~/uploaded/@listQuestion[i].Image" class="w-50 my-3" />
                            }
                            if (!string.IsNullOrEmpty(listQuestion[i].Audio))
                            {
                                <audio controls>
                                    <source src="~/uploaded/@listQuestion[i].Audio" type="audio/ogg" >
                                </audio>
                            }
                        }
                    <div class="ml-md-3 ml-sm-3 pl-md-5 pt-sm-0 pt-3" id="options">
                            <input type="hidden" value="@listQuestion[i].QuestionId" name="UserAnswerRequest[@i].QuestionId" />
                        <label class="options">
                            @Base64.Base64Decode(listQuestion[i].AnswerA)
                                <input type="radio" name="UserAnswerRequest[@i].UserAnswerQuestion" value="@listQuestion[i].AnswerA">
                            <span class="checkmark"></span>
                        </label>
                        <label class="options">
                            @Base64.Base64Decode(listQuestion[i].AnswerB)
                                <input type="radio" name="UserAnswerRequest[@i].UserAnswerQuestion" value="@listQuestion[i].AnswerB">
                            <span class="checkmark"></span>
                        </label>
                        <label class="options">
                            @Base64.Base64Decode(listQuestion[i].AnswerC)
                                <input type="radio" name="UserAnswerRequest[@i].UserAnswerQuestion" value="@listQuestion[i].AnswerC">
                            <span class="checkmark"></span>
                        </label>
                        <label class="options">
                            @Base64.Base64Decode(listQuestion[i].AnswerD)
                                <input type="radio" name="UserAnswerRequest[@i].UserAnswerQuestion" value="@listQuestion[i].AnswerD">
                            <span class="checkmark"></span>
                        </label>
                    </div>
                </div>
                </div>
            }
        }
    </div>
    <div class="d-flex justify-content-end py-4 w-75">
        <button class="btn btn-success" data-toggle="modal" data-target="#exampleModalCenter" id="submitTestButton">Nộp bài</button>
    </div>
}

